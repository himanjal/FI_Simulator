#! /usr/bin/env python
#
# Support module generated by PAGE version 4.10
# In conjunction with Tcl version 8.6
#    Feb 06, 2018 02:57:39 PM


import sys
from Tkinter import *
from tkFileDialog import askopenfile
import untangle
from subprocess import *
import subprocess
import tempfile
import time
import ttk
import gui

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

# ***** Variables *****

WIDTH = 1000
HEIGHT = 1000

tempf = tempfile.TemporaryFile()
pluginProcess = Popen('arm-none-eabi-gdb', stdin=subprocess.PIPE, stderr=subprocess.PIPE, stdout=tempf)
programFile = ""
newTriggger = ""

# ***** Functions *****

# Connect to QEMU

def connect():
    print "FILE ", programFile
    print "\n"
    subprocess.call("arm-linux-gnueabi-gcc -g {0} -o {1}-arm -static".format(programFile, programFile.split('.')[0]) , shell=True, stdout=subprocess.PIPE)
    subprocess.call("fuser -n tcp -k 1234", shell=True,stdout=subprocess.PIPE)
    qemuProcess = Popen("qemu-arm -singlestep -g 1234 {0}-arm".format(programFile.split('.')[0]), shell=True, stdout=subprocess.PIPE)
    print "File ", programFile, " successfully compiled"
    print "QEMU launched at port 1234"
    print "\nConnecting to QEMU\n\n"
    pluginProcess.stdin.write("file {0}-arm\n".format(programFile.split('.')[0]))
    pluginProcess.stdin.write("target remote localhost: 1234\n")
    pluginProcess.stdin.write("set pagination off\n")
    print "Connected to Qemu using GDB"

# Add Breakpoints

def addBreakpoints():
    bpNum = 1
    for trigger in faults:
        bp = trigger.bp
        if bp[0:2] == "0x":
            pluginProcess.stdin.write("B *" + bp + "\n")
        else: pluginProcess.stdin.write("B " + bp + "\n")
        pluginProcess.stdin.write("ignore " + str(bpNum) + " " + trigger.lp + "\n")
        pluginProcess.stdin.write("commands\n")
        pluginProcess.stdin.write("info R\n")
        for reg in trigger.regList:
            pluginProcess.stdin.write("set $" + reg + "=0\n")
        pluginProcess.stdin.write("del " + str(bpNum) + "\n")
        if bpNum == len(faults):
            pluginProcess.stdin.write("B add\n")
        pluginProcess.stdin.write("info R\n")
        pluginProcess.stdin.write("c\n")
        pluginProcess.stdin.write("end\n")
        bpNum = bpNum + 1

# ***** C File *****

def openFileC():
    print "\nOpening C File..."
    programFile = askopenfile().name
    print programFile

    if len(faults) > 0:
        connect()
        addBreakpoints()

# ***** XML File *****

def openFileXML():
    filename = askopenfile()
    file = untangle.parse(filename)
    print "Opening XML File <{0}> ...".format(filename.name)
    faults = []
    
    gui.resetXMLTable()
    
    if programFile != "":
        connect()
        addBreakpoints()
    for item in file.xml.action:
        newTrigger = trigger()
        newTrigger.regList = []

        for reg in item.rg['registerList'][1:-1].split(','):
            newTrigger.regList.append(reg.split()[0])

        #newTrigger.regList = item.rg['registerList']
        
        newTrigger.bp = item.bp['breakpointAddress']
        newTrigger.lp = item.lp['loopCounter']
        newTrigger.mask = item.mk['mask']
        faults.append(newTrigger)
    
    for item in faults:
        item_list = "{0:15}{1:10}{2:32}{3:10}".format(item.bp,item.lp,item.regList,item.mask)

    gui.insertXMLTable(item_list)


class trigger:
    bp = ""
    lp =""
    regList = []
    mask = ""


# ***************


def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import gui
    gui.vp_start_gui()



