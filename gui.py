#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.10
# In conjunction with Tcl version 8.6
#    Feb 06, 2018 02:57:38 PM
import sys
from Tkinter import *
from tkFileDialog import askopenfile
import untangle
from subprocess import *
import subprocess
import tempfile
import time
import ttk
import backend


# ***** Variables *****

WIDTH = 1000
HEIGHT = 1000
global top

tempf = tempfile.TemporaryFile()
pluginProcess = Popen('arm-none-eabi-gdb', stdin=subprocess.PIPE, stderr=subprocess.PIPE, stdout=tempf)
programFile = ""
newTriggger = ""

# ***** Functions *****

# Connect to QEMU

def connect():
    print "FILE ", programFile
    print "\n"
    subprocess.call("arm-linux-gnueabi-gcc -g {0} -o {1}-arm -static".format(programFile, programFile.split('.')[0]) , shell=True, stdout=subprocess.PIPE)
    subprocess.call("fuser -n tcp -k 1234", shell=True,stdout=subprocess.PIPE)
    qemuProcess = Popen("qemu-arm -singlestep -g 1234 {0}-arm".format(programFile.split('.')[0]), shell=True, stdout=subprocess.PIPE)
    print "File ", programFile, " successfully compiled"
    print "QEMU launched at port 1234"
    print "\nConnecting to QEMU\n\n"
    pluginProcess.stdin.write("file {0}-arm\n".format(programFile.split('.')[0]))
    pluginProcess.stdin.write("target remote localhost: 1234\n")
    pluginProcess.stdin.write("set pagination off\n")
    print "Connected to Qemu using GDB"

# Add Breakpoints

def addBreakpoints():
    bpNum = 1
    for trigger in faults:
        bp = trigger.bp
        if bp[0:2] == "0x":
            pluginProcess.stdin.write("B *" + bp + "\n")
        else: pluginProcess.stdin.write("B " + bp + "\n")
        pluginProcess.stdin.write("ignore " + str(bpNum) + " " + trigger.lp + "\n")
        pluginProcess.stdin.write("commands\n")
        pluginProcess.stdin.write("info R\n")
        for reg in trigger.regList:
            pluginProcess.stdin.write("set $" + reg + "=0\n")
        pluginProcess.stdin.write("del " + str(bpNum) + "\n")
        if bpNum == len(faults):
            pluginProcess.stdin.write("B add\n")
        pluginProcess.stdin.write("info R\n")
        pluginProcess.stdin.write("c\n")
        pluginProcess.stdin.write("end\n")
        bpNum = bpNum + 1

# ***** C File *****

def openFileC():
    print "\nOpening C File..."
    programFile = askopenfile().name
    print programFile

    if len(faults) > 0:
        connect()
        addBreakpoints()

# ***** XML File *****

def openFileXML():
    filename = askopenfile()
    file = untangle.parse(filename)
    print "Opening XML File <{0}> ...".format(filename.name)
    faults = []
    top.xml_table.delete(0,END)
    
    if programFile != "":
        connect()
        addBreakpoints()
    for item in file.xml.action:
		newTrigger = trigger()
		newTrigger.regList = []

		for reg in item.rg['registerList'][1:-1].split(','):
			newTrigger.regList.append(reg.split()[0])

		#newTrigger.regList = item.rg['registerList']
		
		newTrigger.bp = item.bp['breakpointAddress']
		newTrigger.lp = item.lp['loopCounter']
		newTrigger.mask = item.mk['mask']
		faults.append(newTrigger)
	
    for item in faults:
        item_list = "{0:15}{1:10}{2:32}{3:10}".format(item.bp,item.lp,item.regList,item.mask)

	top.xml_table.insert(END, item_list)


class trigger:
	bp = ""
	lp =""
	regList = []
	mask = ""


# ***************




















# ***** GUI *****

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root, top
    root = Tk()
    top = mainwindow (root)
    backend.init(root, top)
    root.mainloop()

w = None
def create_mainwindow(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    top = mainwindow (w)
    gui_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_mainwindow():
    global w
    w.destroy()
    w = None

class mainwindow:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        font10 = "-family {DejaVu Sans} -size 0 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
        font13 = "-family {DejaVu Sans} -size 10 -weight bold -slant "  \
            "roman -underline 0 -overstrike 0"
        font14 = "-family {DejaVu Sans} -size 12 -weight normal -slant"  \
            " roman -underline 0 -overstrike 0"
        font9 = "-family {Bitstream Vera Serif} -size 20 -weight bold "  \
            "-slant roman -underline 0 -overstrike 0"

        top.geometry("1000x1000+474+148")
        top.title("mainwindow")
        top.configure(background="#ffffff")
        top.configure(highlightcolor="black")

        self.title_frame = Frame(top)
        self.title_frame.place(relx=0.01, rely=0.01, relheight=0.1
                , relwidth=0.98)
        self.title_frame.configure(relief=GROOVE)
        self.title_frame.configure(borderwidth="2")
        self.title_frame.configure(relief=GROOVE)
        self.title_frame.configure(width=-59)

        self.title_label = Label(self.title_frame)
        self.title_label.place(relx=0.29, rely=0.25, height=50, width=425)
        self.title_label.configure(activebackground="#f9f9f9")
        self.title_label.configure(font=font9)
        self.title_label.configure(text='''Fault Injection Simulator''')
        self.title_label.configure(width=425)

        self.open_c_file = Button(self.title_frame)
        self.open_c_file.place(relx=0.85, rely=0.37, height=26, width=94)
        self.open_c_file.configure(activebackground="#d9d9d9")
        self.open_c_file.configure(command=openFileC)
        self.open_c_file.configure(text='''Open C File''')

        self.open_xml_file = Button(self.title_frame)
        self.open_xml_file.place(relx=0.05, rely=0.37, height=26, width=111)
        self.open_xml_file.configure(activebackground="#d9d9d9")
        self.open_xml_file.configure(command=openFileXML)
        self.open_xml_file.configure(text='''Open XML File''')

        self.xml_frame = Frame(top)
        self.xml_frame.place(relx=0.01, rely=0.12, relheight=0.43, relwidth=0.49)

        self.xml_frame.configure(relief=GROOVE)
        self.xml_frame.configure(borderwidth="2")
        self.xml_frame.configure(relief=GROOVE)
        self.xml_frame.configure(width=510)

        self.xml_table = Listbox(self.xml_frame)
        self.xml_table.place(relx=0.02, rely=0.21, relheight=0.77, relwidth=0.95)

        self.xml_table.configure(font="TkFixedFont")
        self.xml_table.configure(relief=RIDGE)
        self.xml_table.configure(selectbackground="#c4c4c4")
        self.xml_table.configure(width=460)
        self.xml_table.insert(END, "No XML File Inputted")

        self.xml_title = Label(self.xml_frame)
        self.xml_title.place(relx=0.45, rely=0.05, height=23, width=87)
        self.xml_title.configure(activebackground="#f9f9f9")
        self.xml_title.configure(font=font10)
        self.xml_title.configure(text='''XML Table''')

        self.attributes = Label(self.xml_frame)
        self.attributes.place(relx=0.02, rely=0.16, height=18, width=439)
        self.attributes.configure(anchor=W)
        self.attributes.configure(font=font13)
        self.attributes.configure(justify=LEFT)
        self.attributes.configure(text='''Breakpoint     Loop       Register                                Mask''')
        self.attributes.configure(width=439)

        self.gdb_frame = Frame(top)
        self.gdb_frame.place(relx=0.01, rely=0.56, relheight=0.43, relwidth=0.49)

        self.gdb_frame.configure(relief=GROOVE)
        self.gdb_frame.configure(borderwidth="2")
        self.gdb_frame.configure(relief=GROOVE)
        self.gdb_frame.configure(width=510)

        self.gdb_table = Listbox(self.gdb_frame)
        self.gdb_table.place(relx=0.02, rely=0.16, relheight=0.81, relwidth=0.95)

        self.gdb_table.configure(background="white")
        self.gdb_table.configure(font="TkFixedFont")
        self.gdb_table.configure(selectbackground="#c4c4c4")
        self.gdb_table.configure(width=460)

        self.gdb_output = Label(self.gdb_frame)
        self.gdb_output.place(relx=0.41, rely=0.07, height=18, width=126)
        self.gdb_output.configure(activebackground="#f9f9f9")
        self.gdb_output.configure(font=font10)
        self.gdb_output.configure(text='''GDB Output''')

        self.register_frame = Frame(top)
        self.register_frame.place(relx=0.51, rely=0.12, relheight=0.43
                , relwidth=0.49)
        self.register_frame.configure(relief=GROOVE)
        self.register_frame.configure(borderwidth="2")
        self.register_frame.configure(relief=GROOVE)
        self.register_frame.configure(width=485)

        self.reg_title = Label(self.register_frame)
        self.reg_title.place(relx=0.47, rely=0.05, height=23, width=78)
        self.reg_title.configure(font=font14)
        self.reg_title.configure(text='''Registers''')

        self.reg_table = Listbox(self.register_frame)
        self.reg_table.place(relx=0.02, rely=0.21, relheight=0.77, relwidth=0.95)

        self.reg_table.configure(font="TkFixedFont")
        self.reg_table.configure(relief=RIDGE)
        self.reg_table.configure(selectbackground="#c4c4c4")
        self.reg_table.configure(width=460)

        self.breakpoint_frame = Frame(top)
        self.breakpoint_frame.place(relx=0.51, rely=0.56, relheight=0.43
                , relwidth=0.49)
        self.breakpoint_frame.configure(relief=GROOVE)
        self.breakpoint_frame.configure(borderwidth="2")
        self.breakpoint_frame.configure(relief=GROOVE)
        self.breakpoint_frame.configure(width=475)

        self.breakpoint_title = Label(self.breakpoint_frame)
        self.breakpoint_title.place(relx=0.45, rely=0.07, height=23, width=99)
        self.breakpoint_title.configure(font=font14)
        self.breakpoint_title.configure(text='''Breakpoints''')

        self.breakpoint_table = Listbox(self.breakpoint_frame)
        self.breakpoint_table.place(relx=0.02, rely=0.17, relheight=0.81
                , relwidth=0.95)
        self.breakpoint_table.configure(background="white")
        self.breakpoint_table.configure(font="TkFixedFont")
        self.breakpoint_table.configure(selectbackground="#c4c4c4")
        self.breakpoint_table.configure(width=460)




if __name__ == '__main__':
    vp_start_gui()


# ***** EOF *****